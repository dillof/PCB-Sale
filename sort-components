#!/usr/bin/env python3

import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), "packages"))

import re

import Components

components = Components.Components()

component_pattern = r"^\s*([-.0-9]+)\s+(.*?)(€([-0-9.]+))?$"

def format_price(price):
    if price is None:
        return "–"
    else:
        return f"{price:.2f}"

class Item:
    def __init__(self, name, amount, price = None):
        self.amount = amount
        self.component = components.get(name)
        self.price = price
    
    def print(self):
        amount = self.amount
        if amount.is_integer():
            amount = int(amount)

        print(f"    {amount} {self.component.name}", end="")
        if self.price is not None:
            print(" €" + format_price(self.price))
        else:
            print("")

    def __repr__(self):
        return f"Item({amount}, {self.component.name}, {price}) at {id(self)}"

    def __lt__(self, other):
        if self.component < other.component:
            return True
        if self.component == other.component:
            if self.price is None:
                return False
            else:
                if other.price is None:
                    return True
                else:
                    return self.price < other.price
    
    def __eq__(self, other):
        return self.price == other.price and self.component == other.component

class ItemList:
    def __init__(self):
        self.items = {}
    
    def add(self, name, amount, price = None):
        key = name + ":" + format_price(price)
        if key in self.items:
            self.items[key].amount += amount
        else:
            self.items[key] = Item(name+"", amount+0, price)

    def sorted(self):
        return sorted(self.items.values())

list = ItemList()

filename = sys.argv[1]
with open(filename, "r") as file:
    for (line_number, line) in enumerate(file):
        line = line.rstrip()
        if not line or line[0] == "#" or line[0] == ";":
            continue

        match = re.search(component_pattern, line)
        if match:
            try:
                amount = float(match.group(1))
            except:
                print(f"{filename}:{line_number}: Invalid amount '{match.group(1)}'", file=sys.stderr)
                ok = False
                continue

            name = match.group(2).rstrip()
            price = None
            if match.group(4):
                try:
                    if match.group(4) != "-":
                        price = float(match.group(4))
                except:
                    print(f"{filename}:{line_number}: Invalid price '{match.group(4)}'", file=sys.stderr)
                    ok = False

            list.add(name, amount, price)

suppliers = {}

for item in sorted(list.items.values()):
    supplier = item.component.get_supplier()
    if supplier is None:
        supplier = "Unavailable"
    if supplier not in  suppliers:
        suppliers[ supplier] = []
    suppliers[ supplier].append(item)

print("title: Component Order\npage: private\nlinks:\n\nphotos:")
for  supplier in sorted(suppliers.keys()):
    print(f"components: {supplier}")
    for item in suppliers[supplier]:
        item.print()
print("systems:\n    Computer\n---")
