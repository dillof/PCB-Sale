#!/usr/bin/env python3

import enum
import markdown
from pathlib import Path
import functools
import re
import sys

component_cost_pattern = r"^\s*(\S+)\s+(.*?)(http.*)?$"
preamble_field_pattern = r"^(\S+):\s*(.*)$"
component_pattern = r"^\s*([-.0-9]+)\s+(.*?)(€([-0-9.]+))?$"
photo_pattern = r"^\s*([^:]*):\s+(.*)$"
link_pattern = r"^\s*(.*?)(:(.*))?$"
page_system_pattern =r"^\s*([^|]*)(\|(.*))?$"

link_name_aliases = {
    "ibom": "Interakiver Bestückungsplan",
    "home": "Projekt-Homepage",
    "schematics": "Schaltplan"
}

link_defaults = {
    "ibom": "ibom.html",
    "schematics": "schematics.pdf"
}

seller_links = {
    "aliexpress": "AliExpress",
    "amazon": "Amazon",
    "berrybase": "BerryBase",
    "conrad": "Conrad",
    "digikey": "DigiKey",
    "ebay": "eBay",
    "mouser": "Mouser",
    "reichelt": "Reichelt",
    "restore-store": "Restore-Store",
    "welectron": "Welectron"
}

class Systems:
    def __init__(self):
        self.category_list = []
        self.categories = {}
        self.pages = {True: {}, False: {}}
    
    def add_category(self, category):
        if self.has_category(category):
            raise RuntimeError(f"duplicate category '{category}'")
        self.category_list.append(category)
        self.categories[category] = []
    
    def add_system(self, category, system):
        if not self.has_category(category):
            raise RuntimeError(f"unknown category '{category}'")
        if self.has_system(system):
            raise RuntimeError(f"duplicate system '{system}'")
        self.categories[category].append(system)
        self.pages[True][system] = []
        self.pages[False][system] = []

    def add_page(self, page):
        for system in page.systems:
            self.pages[page.hidden][system].append(page)

    def has_category(self, category):
        return category in self.categories
    
    def has_system(self, system):
        return system in self.pages[False]

    def write_html(self, file, hidden = False):
        for category in self.category_list:
            print(f'<h2 class="system-category">{category}</h2>', file=file)
            for system in self.categories[category]:
                if len(self.pages[hidden][system]) > 0:
                    print(f'<h3 class="system">{system}</h3>\n<div class="links">', file=file)
                    sorted_pages = sorted(self.pages[hidden][system], key=functools.cmp_to_key(lambda a, b: a.compare_system_list(b, system)))
                    for page in sorted_pages:
                        print(f'<a href="{page.directory}/"', file=file, end="")
                        if page.tags:
                            print(f' class="{" ".join(page.tags)}"', file=file, end="")
                        print(f'><span>', end="", file=file)
                        if len(page.photos) > 0:
                            print(f'<img src="{page.directory}/{page.photos[0].file}">', end="", file=file)
                        print(f'</span><span>{page.link_title(system)}</span></a>', file=file)
                    print("</div>", file=file)

class State(enum.Enum):
    COMPONENTS = "components"
    CONTENT = "content"
    LINKS = "links"
    PHOTOS = "photos"
    PREAMBLE = "preamble"
    SYSTEMS = "systems"

class ComponentList:
    def __init__(self):
        self.categories_names = {}
        self.categories_ordered = {}
        self.category_list = []

    def add_category(self, category):
        if category in self.categories_names:
            raise RuntimeError(f"duplicate category '{category}'")
        self.categories_names[category] = {}
        self.categories_ordered[category] = []
        self.category_list.append(category)
    
    def add_component(self, category, name):
        if category not in self.categories_names:
            raise RuntimeError(f"unknown category '{category}'")
        if name in self.categories_names[category]:
            return
        self.categories_names[category][name] = True
        self.categories_ordered[category].append(name)
    
    def write_html(self, file):
        print(f'<html>\n<head>\n<meta charset="utf-8">\n<title>Komponenten</title>\n<link rel="stylesheet" href="style.css">\n</head>\n<body>\n<h1>Komponenten</h1>', file=file)

        for category in self.category_list:
            print(f'<h2>{category}</h2>', file=file)
            print(f'<table class="components cost">\n<tr class="header"><td>Komponente</td><td>Preis</td><td>Anbieter</td><tr>', file=file)
            for name in self.categories_ordered[category]:
                price = components[name].minimum
                if price is None:
                    price = "—"
                else:
                    price = f"€{price:.2f}"
                print(f'<tr class="component"><td>{name}</td><td>{price}</td><td>{components[name].html()}</td></tr>', file=file)
            print(f'</table>', file=file)
        print(f'</body></html>', file=file)



class ComponentCost:
    def __init__(self):
        self.minimum = None
        self.sellers = []

    def add(self, seller):
        if self.minimum is None or (seller.price is not None and seller.price < self.minimum):
            self.minimum = seller.price
        self.sellers.append(seller)
    
    def html(self):
        sellers = []
        for seller in sorted(self.sellers):
            seller_html = seller.html()
            if seller_html is not None:
                sellers.append(seller.html())
        return ' • '.join(sellers)

class ComponentSeller:
    def __init__(self, price, link):
        self.price = price
        self.link = link
    
    def __lt__(self, other):
        if self.price is not None:
            if other.price is not None:
                return self.price < other.price
            else:
                return True
        else:
            return False
    
    def __le__(self, other):
        if self.price is not None:
            if other.price is not None:
                return self.price <= other.price
            else:
                return True
        else:
            return other.price is None
    
    def __eq__(self, other):
        if self.price is not None:
            if other.price is not None:
                return self.price == other.price
            else:
                return False
        else:
            return other.price is None
    
    def __ne__(self, other):
        return not self == other
    
    def __ge__(self, other):
        return not self < other
    
    def __gt__(self, other):
        return not self <= other
    
    def seller(self):
        if self.link is None:
            return None
        for site in seller_links:
            if site in self.link:
                return seller_links[site]
        match = re.search(r"^https?://([^/]*).*$", self.link)
        if match:
            return match.group(1)
        else:
            return None
    
    def html(self):
        if self.link is None:
            return None
        return f'<a class="seller" href="{self.link}">{self.seller()}</a>'

class Component:
    def __init__(self, amount, name, component_cost = None, price = None):
        self.amount = amount
        self.name = name
        self.price = price
        self.component_cost = component_cost
        if self.price is None and self.component_cost is not None:
            self.price = self.component_cost.minimum
    
    def is_pcb(self):
        return "Platine" in self.name

    def cost(self):
        if self.price is not None:
            return self.amount * self.price
        else:
            return None
    
    def cost_string(self):
        cost = self.cost()
        if cost is not None:
            return f'€{cost:.2f}'
        else:
            return '—'
    
    def seller_string(self):
        if self.component_cost is not None:
            return self.component_cost.html()
        else:
            return ""
    
    def html(self):
        if self.amount.is_integer():
            amount_string = f'{int(self.amount)}'
        else:
            amount_string = f'{self.amount}'
        return f'<tr class="component"><td>{self.name}</td><td>{amount_string}</td><td>{self.cost_string()}</td><td>{self.seller_string()}</tr>'


class Link:
    def __init__(self, name, link):
        self.name = name
        self.link = link
    
class Photo:
    def __init__(self, file, title):
        self.file = file
        self.title = title

class Page:
    def __init__(self, directory):
        self.directory = directory
        self.title = ""
        self.hidden = False
        self.systems = {}
        self.components = {}
        self.components_names = []
        self.photos = []
        self.content = []
        self.links = []
        self.tags = []
    
    def write_html(self, file):
        print(f'<html>\n<head>\n<meta charset="utf-8">\n<title>{self.title}</title>\n<link rel="stylesheet" href="../style.css">\n</head>\n<body>\n<h1>{self.title}</h1>', file=file)

        if len(self.content) > 0:
            print(markdown.markdown("\n".join(self.content), extensions=['tables']), file=file)

        if len(self.links) > 0:
            print('<p class="links">', file=file)
            first = True
            for link in self.links:
                if first:
                    first = False
                else:
                    print('•', file=file)
                print(f'<a href="{link.link}">{link.name}</a>', file=file)
            print('</p>', file=file)

        if len(self.photos) > 0:
            print('<p class="photos">', file=file)
            for photo in self.photos:
                print(f'<img src="{photo.file}" alt="{photo.title}">', file=file)
            print('</p>', file=file)

        for components_name in self.components_names:
            components = self.components[components_name]
            if components_name:
                print(f'<h3 class="components">{components_name}</h3>', file=file)
            print('<table class="components list">\n<tr class="header"><td>Komponente</td><td>Anzahl</td><td>Preis</td><td>Anbieter</td></tr>', file=file)

            total_pcb = 0
            total_kit = 0
            have_pcb = False
            have_kit = False
            unknown_kit_price = False
            unknown_pcb_price = False
            for component in components:
                price = component.cost()
                if price is not None:
                    if component.is_pcb():
                        total_pcb += price
                        have_pcb = True
                    else: 
                        have_kit = True
                    total_kit += price
                else:
                    if component.is_pcb():
                        unknown_pcb_price = True
                    unknown_kit_price = True
                print(component.html(), file=file)
                if component.is_pcb():
                    have_pcb = True
            if have_pcb:
                if unknown_pcb_price:
                    total_pcb_string = "—"
                else:
                    total_pcb_string = f"€{total_pcb:.2f}"
                print(f'<tr class="total"><td>nur Platine</td><td></td><td>{total_pcb_string}</td><td></td></tr>', file=file)
            if have_kit:
                if unknown_kit_price:
                    kit_name = "Teilbausatz"
                else:
                    kit_name = "Bausatz"
                total_kit_string = f"€{total_kit:.2f}"
                print(f'<tr class="total"><td>{kit_name}</td><td></td><td>{total_kit_string}</td><td></td></tr>', file=file)
            print('</table>', file=file)

        print("</body>\n</html>", file=file)
    
    def compare_system_list(self, other, system):
        if system in self.systems and system in other.systems:
            index = self.systems[system]
            other_index = other.systems[system]
            if index != other_index:
                return index - other_index
            else:
                link_title = self.link_title(system)
                other_link_title = other.link_title(system)
                if link_title < other_link_title:
                    return -1
                elif link_title > other_link_title:
                    return 1
                else:
                    return 0
        else:
            return 0
    
    def link_title(self, system):
        if self.title.startswith(system):
            return self.title[len(system):].strip()
        else:
            return self.title

systems = Systems()

with open('systems.txt', 'r') as file:
    category = ""
    for (line_number, line) in enumerate(file):
        if line.startswith("#"):
            category = line[1:].strip()
            systems.add_category(category)
        else:
            systems.add_system(category, line.strip())

components = {}
component_list = ComponentList()

ok = True

with open('component-costs.txt', 'r') as file:
    current_category = ''
    for (line_number, line) in enumerate(file):
        line = line.rstrip()
        if not line:
            continue
        if line[0] == "#":
            if line[1] == "#":
                continue
            current_category = line[1:].strip()
            component_list.add_category(current_category)
            continue
        
        match = re.search(component_cost_pattern, line)
        if match:
            price = None
            if match.group(1) != "-":
                try:
                    price = float(match.group(1))
                except:
                    print(f"component-costs.txt:{line_number}: Invalid price '{match.group(1)}'", file=sys.stderr)
                    ok = False
            name = match.group(2).strip()
            link = match.group(3)
            if name not in components:
                components[name] = ComponentCost()
            components[name].add(ComponentSeller(price, link))
            component_list.add_component(current_category, name)
        else:
            print(f"component-costs.txt:{line_number}: Invalid component cost line '{line}'", file=sys.stderr)
            ok = False

if not ok:
    sys.exit(1)

for directory in [d.name for d in Path(".").iterdir() if d.is_dir()]:
    if directory.startswith(".") or directory == "orders" or directory == "packages" or directory == "django":
        continue
    page = {}
    filename = f"{directory}/index.md"
    current_components_name = ""
    with open(filename, "r") as file:
        state = State.PREAMBLE
        page = Page(directory)

        for (line_number, line) in enumerate(file):
            line = line.rstrip()
            if state != State.CONTENT and (not line or line[0] == "#"):
                continue
            if state != State.PREAMBLE and state != State.CONTENT:
                if line[0] != " ":
                    state = State.PREAMBLE
            
            if state == State.PREAMBLE:
                if line == "---":
                    state = State.CONTENT
                else:
                    match = re.search(preamble_field_pattern, line)
                    if match:
                        field = match.group(1)
                        if field == "title":
                            page.title = match.group(2)
                        elif field == "page":
                            page.hidden = True
                        elif field == "tags":
                            page.tags = match.group(2).split(" ")
                        else:
                            try:
                                state = State(field)
                                if field == "components":
                                    current_components_name = match.group(2)
                                    page.components_names.append(current_components_name)
                            except:
                                print(f"{filename}:{line_number}: Invalid preamble field '{field}'", file=sys.stderr)                                
                                ok = False
                    else:
                        print(f"{filename}:{line_number}: Invalid line in preamble: '{line}'", file=sys.stderr)
                        ok = False

            elif state == State.COMPONENTS:
                match = re.search(component_pattern, line)
                if match:
                    try:
                        amount = float(match.group(1))
                    except:
                        print(f"{filename}:{line_number}: Invalid amount '{match.group(1)}'", file=sys.stderr)
                        ok = False
                        continue

                    name = match.group(2).rstrip()
                    price = None
                    explicit_price = False
                    component_cost = None
                    if match.group(4):
                        try:
                            explicit_price = True
                            if match.group(4) != "-":
                                price = float(match.group(4))
                        except:
                            print(f"{filename}:{line_number}: Invalid price '{match.group(4)}'", file=sys.stderr)
                            ok = False
                    if name in components:
                        component_cost = components[name]
                    if not explicit_price and component_cost is None:
                        print(f"{filename}:{line_number}: Unknown component '{name}'", file=sys.stderr)
                        ok = False
                    if current_components_name not in page.components:
                        page.components[current_components_name] = []
                    page.components[current_components_name].append(Component(amount, name, component_cost, price))
                else:
                    print(f"{filename}:{line_number}: Invalid component line '{line}'", file=sys.stderr)
                    ok = False
            
            elif state == State.PHOTOS:
                match = re.search(photo_pattern, line)
                if match:
                    page.photos.append(Photo(match.group(1), match.group(2)))
                else:
                    print(f"{filename}:{line_number}: Invalid photo line '{line}'", file=sys.stderr)
                    ok = False

            elif state == State.LINKS:
                match = re.search(link_pattern, line)
                if match:
                    name = match.group(1).strip()
                    link = match.group(3)
                    if not link:
                        if name in link_defaults:
                            link = link_defaults[name]
                        else:
                                print(f"{filename}:{line_number}: No link given for '{name}'", file=sys.stderr)
                                ok = False
                                continue
                    if name in link_name_aliases:
                        name = link_name_aliases[name]
                    page.links.append(Link(name, link))
                else:
                    print(f"{filename}:{line_number}: Invalid system line '{line}'", file=sys.stderr)
                    ok = False


            elif state == State.SYSTEMS:
                match = re.search(page_system_pattern, line)
                if match:
                    system = match.group(1).strip()
                    index = match.group(3)
                    if not index:
                        index = 999
                    else:
                        try:
                            index = float(index)
                        except:
                            print(f"{filename}:{line_number}: Invalid system index '{index}'", file=sys.stderr)
                            ok = False
                            continue
                    if systems.has_system(system):
                        page.systems[system] = index
                    else:
                        print(f"{filename}:{line_number}: Unknown system '{system}'", file=sys.stderr)
                        ok = False
                else:
                    print(f"{filename}:{line_number}: Invalid system line '{line}'", file=sys.stderr)
                    ok = False

            elif state == State.CONTENT:
                page.content.append(line)
        
        if len(page.systems) == 0:
            print(f"{filename}: No systems specified.")
            ok = False

        systems.add_page(page)

        with open(f"{directory}/index.html", "w") as file:
            page.write_html(file)

with open("index.md", "r") as file:
    content = file.read()

with open("index.html", "w") as file:
    print('<html>\n<head><meta charset="utf-8"><title>Platinenrestposten</title>\n<link rel="stylesheet" href="style.css">\n</head>\n<body>\n<h1>Platinenrestposten</h1>', file=file)

    print(markdown.markdown(content, extensions=['tables']), file=file)

    systems.write_html(file)

with open("hidden.html", "w") as file:
    print('<html>\n<head><meta charset="utf-8"><title>Platinenrestposten</title>\n<link rel="stylesheet" href="style.css">\n</head>\n<body>\n<h1>Platinenrestposten</h1>', file=file)

    systems.write_html(file, True)

with open("component-costs.html", "w") as file:
    component_list.write_html(file)

if not ok:
    sys.exit(1)
